{{- /* microservice deployment */}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    component: primary
    {{- include "app.labels" . | nindent 4 }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.deployment.rolloutSurge }}
      maxUnavailable: {{ .Values.deployment.rolloutUnavailable }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  replicas: {{ .Values.autoscaling.min_replicas }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        component: primary
        {{- include "app.labels" . | nindent 8 }}
      annotations:
        {{- include "common.annotations" . | nindent 8 }}
    spec:
      serviceAccountName: {{ default (include "appname" .) .Values.serviceAccount }}
      nodeSelector:
        iam.gke.io/gke-metadata-server-enabled: "true"
        {{- range $key,$value:= index .Values "deployment" "nodeSelector" }}
        {{ $key }}: {{ tpl ($value | toString) $ | quote }}
        {{- end }}
      containers:
        - name: {{ .Release.Name }}
          image: {{ printf "%s:%s" .Values.image .Values.image_tag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: HANDLE_BROKER_MESSAGES
              value: {{ if (and (hasKey .Values "worker") (hasKey .Values.worker "enabled") .Values.worker.enabled) }}{{ "false" | quote }}{{ else }}{{ "true" | quote }}{{ end }}
            - name: APP
              value: {{ .Release.Name }}
            - name: ENV
              value: {{ .Values.global.env }}
            {{- range $key, $value := .Values.parameters }}
            {{- if ne $key "HANDLE_BROKER_MESSAGES" }}
            - name: {{ upper $key | replace "-" "_" }}
              value: {{ tpl ($value | toString) $ | quote }}
            {{- end }}
            {{- end }}
            {{- range $secret := .Values.secrets }}
            - name: {{ upper $secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret | replace "_" "-" }}
                  key: value
                  optional: false
            {{- end }}
          volumeMounts:
            - name: gcp-secret-store-vol
              mountPath: "/var/secrets-store"
              readOnly: true
          {{- if or .Values.service.internalPort (and .Values.debug.enabled .Values.debug.port) }}
          ports:
            {{- if .Values.service.internalPort }}
            - containerPort: {{ .Values.service.internalPort }}
            {{- end }}
            {{- if and .Values.debug.enabled .Values.debug.port }}
            - containerPort: {{ .Values.debug.port }}
            {{- end }}
          {{- end }}
          {{- $probe := .Values.probeConfig | default dict }}
          {{- if .Values.startupProbe }}
          startupProbe:
            {{- merge $probe .Values.startupProbe | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
            {{- merge $probe .Values.livenessProbe | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            {{- merge $probe .Values.readinessProbe | toYaml | nindent 12 }}
          {{- end }}
          {{- if not .Values.debug.enabled }}
          resources:
            requests:
              cpu: {{ .Values.autoscaling.min_cpu }}
              memory: {{ .Values.autoscaling.min_memory }}
            limits:
              {{- if .Values.autoscaling.max_cpu }}
              cpu: {{ .Values.autoscaling.max_cpu }}
              {{- end }}
              memory: {{ .Values.autoscaling.max_memory }}
          {{- end }}
          {{- if .Values.debug.enabled }}
          command: {{ mustRegexSplit " +" .Values.debug.command -1 | toYaml | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: gcp-secret-store-vol
              mountPath: "/var/secrets-store"
              readOnly: true
      {{- if .Values.init_container.enabled }}
      initContainers:
        - name: {{ .Release.Name }}-init-script
          image: {{ printf "%s:%s" .Values.image .Values.image_tag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command:
            {{- .Values.init_container.command | toYaml | nindent 12 }}
          env:
            - name: APP
              value: {{ .Release.Name }}
            - name: ENV
              value: {{ .Values.global.env }}
            {{- range $key,$value:= .Values.parameters }}
            - name: {{ upper $key | replace "-" "_" }}
              value: {{ tpl ($value | toString) $ | quote }}
            {{- end }}
            {{- range $secret := .Values.secrets }}
            - name: {{ upper $secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret | replace "_" "-" }}
                  key: value
                  optional: false
            {{- end }}
          volumeMounts:
            - name: gcp-secret-store-vol
              mountPath: "/var/secrets-store"
              readOnly: true
      {{- end }}
      volumes:
        - name: gcp-secret-store-vol
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ printf "gcp-secrets-%s" (include "appname" .)}}
---
{{- if and (hasKey .Values "worker") (hasKey .Values.worker "enabled") .Values.worker.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-worker
  namespace: {{ .Release.Namespace }}
  labels:
    component: worker
    tags.datadoghq.com/service: {{ .Release.Name }}-worker
    {{- include "worker.labels" . | nindent 4 }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      {{- $workerRolloutSurge := "" }}
      {{- if and (hasKey .Values.worker "deployment") (hasKey .Values.worker.deployment "rolloutSurge") }}
      {{- $workerRolloutSurge = .Values.worker.deployment.rolloutSurge }}
      {{- else }}
      {{- $workerRolloutSurge = .Values.deployment.rolloutSurge }}
      {{- end }}
      maxSurge: {{ $workerRolloutSurge }}
      {{- $workerRolloutUnavailable := "" }}
      {{- if and (hasKey .Values.worker "deployment") (hasKey .Values.worker.deployment "rolloutUnavailable") }}
      {{- $workerRolloutUnavailable = .Values.worker.deployment.rolloutUnavailable }}
      {{- else }}
      {{- $workerRolloutUnavailable = .Values.deployment.rolloutUnavailable }}
      {{- end }}
      maxUnavailable: {{ $workerRolloutUnavailable }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-worker
  {{- $workerReplicas := "" }}
  {{- if and (hasKey .Values.worker "autoscaling") (hasKey .Values.worker.autoscaling "min_replicas") }}
  {{- $workerReplicas = .Values.worker.autoscaling.min_replicas }}
  {{- else }}
  {{- $workerReplicas = .Values.autoscaling.min_replicas }}
  {{- end }}
  replicas: {{ $workerReplicas }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-worker
        component: worker
        tags.datadoghq.com/service: {{ .Release.Name }}-worker
        {{- include "worker.labels" . | nindent 8 }}
      annotations:
        {{- include "common.annotations" . | nindent 8 }}
    spec:
      serviceAccountName: {{ default (include "appname" .) .Values.serviceAccount }}
      nodeSelector:
        iam.gke.io/gke-metadata-server-enabled: "true"
        {{- $nodeSelectors := dict }}
        {{- if and (hasKey .Values.worker "deployment") (hasKey .Values.worker.deployment "nodeSelector") }}
        {{- $nodeSelectors = .Values.worker.deployment.nodeSelector }}
        {{- else }}
        {{- $nodeSelectors = .Values.deployment.nodeSelector }}
        {{- end }}
        {{- range $key,$value := $nodeSelectors }}
        {{ $key }}: {{ tpl ($value | toString) $ | quote }}
        {{- end }}
      containers:
        - name: {{ .Release.Name }}-worker
          image: {{ printf "%s:%s" .Values.image .Values.image_tag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: HANDLE_BROKER_MESSAGES
              value: "true"
            - name: APP
              value: {{ .Release.Name }}-worker
            - name: ENV
              value: {{ .Values.global.env }}
            {{- range $key, $value := .Values.parameters }}
            {{- if ne $key "HANDLE_BROKER_MESSAGES" }}
            - name: {{ upper $key | replace "-" "_" }}
              value: {{ tpl ($value | toString) $ | quote }}
            {{- end }}
            {{- end }}
            {{- if hasKey .Values.worker "parameters" }}
            {{- range $key, $value := .Values.worker.parameters }}
            {{- if ne $key "HANDLE_BROKER_MESSAGES" }}
            - name: {{ upper $key | replace "-" "_" }}
              value: {{ tpl ($value | toString) $ | quote }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- range $secret := .Values.secrets }}
            - name: {{ upper $secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret | replace "_" "-" }}
                  key: value
                  optional: false
            {{- end }}
          volumeMounts:
            - name: gcp-secret-store-vol
              mountPath: "/var/secrets-store"
              readOnly: true
          resources:
            requests:
              {{- $workerMinCPU := "" }}
              {{- if and (hasKey .Values.worker "autoscaling") (hasKey .Values.worker.autoscaling "min_cpu") }}
              {{- $workerMinCPU = .Values.worker.autoscaling.min_cpu }}
              {{- else }}
              {{- $workerMinCPU = .Values.autoscaling.min_cpu }}
              {{- end }}
              cpu: {{ $workerMinCPU }}
              {{- $workerMinMemory := "" }}
              {{- if and (hasKey .Values.worker "autoscaling") (hasKey .Values.worker.autoscaling "min_memory") }}
              {{- $workerMinMemory = .Values.worker.autoscaling.min_memory }}
              {{- else }}
              {{- $workerMinMemory = .Values.autoscaling.min_memory }}
              {{- end }}
              memory: {{ $workerMinMemory }}
            limits:
              {{- $hasWorkerMaxCPU := and (hasKey .Values.worker "autoscaling") (hasKey .Values.worker.autoscaling "max_cpu") }}
              {{- if or $hasWorkerMaxCPU .Values.autoscaling.max_cpu }}
              {{- $workerMaxCPU := "" }}
              {{- if $hasWorkerMaxCPU }}
              {{- $workerMaxCPU = .Values.worker.autoscaling.max_cpu }}
              {{- else }}
              {{- $workerMaxCPU = .Values.autoscaling.max_cpu }}
              {{- end }}
              cpu: {{ $workerMaxCPU }}
              {{- end }}
              {{- $workerMaxMemory := "" }}
              {{- if and (hasKey .Values.worker "autoscaling") (hasKey .Values.worker.autoscaling "max_memory") }}
              {{- $workerMaxMemory = .Values.worker.autoscaling.max_memory }}
              {{- else }}
              {{- $workerMaxMemory = .Values.autoscaling.max_memory }}
              {{- end }}
              memory: {{ $workerMaxMemory }}
      volumes:
        - name: gcp-secret-store-vol
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ printf "gcp-secrets-%s" (include "appname" .)}}
{{- end }}